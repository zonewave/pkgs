package userkit

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *UserKit) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		fieldStr:=msgp.UnsafeString(field)
		switch fieldStr {
		case "userID":
			z.UserID, err = dc.ReadUint64()
		case "locale":
			z.Locale, err = dc.ReadString()
		case "appVersion":
			z.AppVersion, err = dc.ReadString()
		case "regionCode":
			z.RegionCode, err = dc.ReadString()
		case "timezone":
			z.TimeZone, err = dc.ReadString()
		case "timeOffset":
			z.TimeOffset, err = dc.ReadInt()
		case "userAgent":
			z.UserAgent, err = dc.ReadString()
		default:
			err = dc.Skip()
		}
		if err != nil {
			err = msgp.WrapError(err, fieldStr)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UserKit) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "userID"
	err = en.Append(0x87, 0xa6, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.UserID)
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	// write "locale"
	err = en.Append(0xa6, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Locale)
	if err != nil {
		err = msgp.WrapError(err, "Locale")
		return
	}
	// write "appVersion"
	err = en.Append(0xaa, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.AppVersion)
	if err != nil {
		err = msgp.WrapError(err, "AppVersion")
		return
	}
	// write "regionCode"
	err = en.Append(0xaa, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.RegionCode)
	if err != nil {
		err = msgp.WrapError(err, "RegionCode")
		return
	}
	// write "timezone"
	err = en.Append(0xa8, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.TimeZone)
	if err != nil {
		err = msgp.WrapError(err, "TimeZone")
		return
	}
	// write "timeOffset"
	err = en.Append(0xaa, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.TimeOffset)
	if err != nil {
		err = msgp.WrapError(err, "TimeOffset")
		return
	}
	// write "userAgent"
	err = en.Append(0xa9, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserAgent)
	if err != nil {
		err = msgp.WrapError(err, "UserAgent")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UserKit) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "userID"
	o = append(o, 0x87, 0xa6, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendUint64(o, z.UserID)
	// string "locale"
	o = append(o, 0xa6, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Locale)
	// string "appVersion"
	o = append(o, 0xaa, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.AppVersion)
	// string "regionCode"
	o = append(o, 0xaa, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendString(o, z.RegionCode)
	// string "timezone"
	o = append(o, 0xa8, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65)
	o = msgp.AppendString(o, z.TimeZone)
	// string "timeOffset"
	o = append(o, 0xaa, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o = msgp.AppendInt(o, z.TimeOffset)
	// string "userAgent"
	o = append(o, 0xa9, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.UserAgent)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UserKit) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		fieldStr:=msgp.UnsafeString(field)
		switch fieldStr {
		case "userID":
			z.UserID, bts, err = msgp.ReadUint64Bytes(bts)
		case "locale":
			z.Locale, bts, err = msgp.ReadStringBytes(bts)
		case "appVersion":
			z.AppVersion, bts, err = msgp.ReadStringBytes(bts)
		case "regionCode":
			z.RegionCode, bts, err = msgp.ReadStringBytes(bts)
		case "timezone":
			z.TimeZone, bts, err = msgp.ReadStringBytes(bts)
		case "timeOffset":
			z.TimeOffset, bts, err = msgp.ReadIntBytes(bts)
		case "userAgent":
			z.UserAgent, bts, err = msgp.ReadStringBytes(bts)
		default:
			bts, err = msgp.Skip(bts)
		}
		if err != nil {
			err = msgp.WrapError(err,fieldStr)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UserKit) Msgsize() (s int) {
	s = 1 + 7 + msgp.Uint64Size + 7 + msgp.StringPrefixSize + len(z.Locale) + 11 + msgp.StringPrefixSize + len(z.AppVersion) + 11 + msgp.StringPrefixSize + len(z.RegionCode) + 9 + msgp.StringPrefixSize + len(z.TimeZone) + 11 + msgp.IntSize + 10 + msgp.StringPrefixSize + len(z.UserAgent)
	return
}
